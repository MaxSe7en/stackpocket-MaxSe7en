export function calculateBets(
  gameId: number,
  selections: Record<string, any[]>,
  startingPoint: number,
  rows: number,
  sample: any
) {
  const selections1 =
    Object?.values(selections)?.filter((arr) => arr.length > 0) ??
    Object.values(selections)[0];
  console.log("selections1", selections1[0]);
  console.log(
    "selectio=============================",
    Object.values(selections)[0]
  );
  switch (gameId) {
    // for sraight joint [1,1,1,1,1]
    case 1:
    case 10:
    case 17:
    case 24:
    case 37:
    case 50:
    case 63:
    case 91:
      return straightJoint(selections, startingPoint, rows);
    // for combo [1,1,1,1,1]
    case 3:
    case 12:
    case 19:
    case 26:
    case 39:
    case 52:
      return straightCombo(selections, startingPoint, rows);
    //   //for group 
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 13:
    case 14:
    case 15:
    case 16:
    case 20:
    case 21:
    case 22:
    case 23: //last 4 group 4
    case 29:
    case 30:
    case 42:
    case 43:
    case 55:
    case 56:
      case 67:
        // case 95:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
      if (rows === 1) {
        return _combinations_totalBets(Object.values(selections)[0], sample[0]);
      } else {
        return _combinations_totalBets(
          Object.values(selections)[0],
          Object.values(selections)[1],
      4,1
        );
      }
      // SUM OF 1ST 2ND 3RD 
    case 27:
    case 40:
    case 53:
     return generateSequence(Object.values(selections)[0]);
    //     break;
    case 135:
      return pickAPlace(3, Object.values(selections)[0].length, 3);
      case 139:
        return getCombination(10, 4)
    default:
      break;
  }
}